"""
Dashboard Streamlit para o sistema Privacy Point
"""
import streamlit as st
import requests
import json
import time
from datetime import datetime
from typing import Dict, Any, List
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Privacy Point - Dashboard",
    page_icon="üîí",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√µes
API_BASE_URL = "http://localhost:8000/api/v1"

def main():
    """Fun√ß√£o principal do dashboard"""
    
    # Sidebar
    st.sidebar.title("Privacy Point")
    st.sidebar.markdown("Sistema de Automa√ß√£o LGPD/ANPD")
    
    # Menu de navega√ß√£o
    page = st.sidebar.selectbox(
        "Navega√ß√£o",
        ["Dashboard", "Gerar Documento", "Documentos", "M√©tricas", "Configura√ß√µes"]
    )
    
    if page == "Dashboard":
        show_dashboard()
    elif page == "Gerar Documento":
        show_document_generator()
    elif page == "Documentos":
        show_documents_list()
    elif page == "M√©tricas":
        show_metrics()
    elif page == "Configura√ß√µes":
        show_settings()

def show_dashboard():
    """P√°gina principal do dashboard"""
    st.title("Dashboard - Privacy Point")
    
    # Verificar sa√∫de da API
    try:
        health_response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if health_response.status_code == 200:
            st.success("API conectada e funcionando")
        else:
            st.warning("API n√£o est√° respondendo - Modo Demo")
    except Exception as e:
        st.warning("API n√£o dispon√≠vel - Modo Demo")
        st.info("Algumas funcionalidades podem estar limitadas")
    
    # M√©tricas r√°pidas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Documentos Processados", "0", "0%")
    
    with col2:
        st.metric("Taxa de Sucesso", "0%", "0%")
    
    with col3:
        st.metric("Tempo M√©dio", "0 min", "0%")
    
    with col4:
        st.metric("Documentos Ativos", "0", "0%")
    
    # Gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Documentos por Tipo")
        # Dados simulados
        data = {
            "Tipo": ["Pol√≠tica de Privacidade", "Termo de Consentimento", "Cl√°usula Contratual"],
            "Quantidade": [5, 3, 2]
        }
        df = pd.DataFrame(data)
        fig = px.bar(df, x="Tipo", y="Quantidade", color="Quantidade")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("Qualidade vs Conformidade")
        # Dados simulados
        data = {
            "Documento": ["Doc 1", "Doc 2", "Doc 3", "Doc 4"],
            "Qualidade": [0.85, 0.92, 0.78, 0.88],
            "Conformidade": [0.90, 0.85, 0.82, 0.95]
        }
        df = pd.DataFrame(data)
        fig = px.scatter(df, x="Qualidade", y="Conformidade", text="Documento")
        st.plotly_chart(fig, use_container_width=True)
    
    # Documentos recentes
    st.subheader("Documentos Recentes")
    
    # Dados simulados
    recent_docs = [
        {
            "ID": "doc-001",
            "Tipo": "Pol√≠tica de Privacidade",
            "Empresa": "TechCorp Ltda",
            "Status": "Aprovado",
            "Qualidade": "85%",
            "Conformidade": "90%",
            "Data": "2024-01-15 14:30"
        },
        {
            "ID": "doc-002", 
            "Tipo": "Termo de Consentimento",
            "Empresa": "HealthClinic",
            "Status": "Em Revis√£o",
            "Qualidade": "78%",
            "Conformidade": "82%",
            "Data": "2024-01-15 13:45"
        }
    ]
    
    df_recent = pd.DataFrame(recent_docs)
    st.dataframe(df_recent, use_container_width=True)

def show_document_generator():
    """P√°gina para gerar novos documentos"""
    st.title("Gerar Novo Documento")
    
    # Formul√°rio de gera√ß√£o
    with st.form("document_generator"):
        st.subheader("Informa√ß√µes B√°sicas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            document_type = st.selectbox(
                "Tipo de Documento",
                [
                    "politica_privacidade",
                    "termo_consentimento", 
                    "clausula_contratual",
                    "ata_comite",
                    "codigo_conduta",
                    "acordo_tratamento_dados",
                    "notificacao_violacao",
                    "avaliacao_impacto"
                ],
                format_func=lambda x: {
                    "politica_privacidade": "Pol√≠tica de Privacidade",
                    "termo_consentimento": "Termo de Consentimento",
                    "clausula_contratual": "Cl√°usula Contratual",
                    "ata_comite": "Ata de Comit√™",
                    "codigo_conduta": "C√≥digo de Conduta",
                    "acordo_tratamento_dados": "Acordo de Tratamento de Dados",
                    "notificacao_violacao": "Notifica√ß√£o de Viola√ß√£o",
                    "avaliacao_impacto": "Avalia√ß√£o de Impacto"
                }[x]
            )
            
            company_name = st.text_input("Nome da Empresa")
            activity_description = st.text_area("Descri√ß√£o da Atividade")
        
        with col2:
            industry_sector = st.selectbox(
                "Setor",
                ["geral", "sa√∫de", "financeiro", "e-commerce", "educa√ß√£o", "tecnologia"]
            )
            
            language = st.selectbox("Idioma", ["pt-BR", "en-US", "es-ES"])
            jurisdiction = st.selectbox("Jurisdi√ß√£o", ["BR", "US", "EU"])
        
        st.subheader("Configura√ß√µes Avan√ßadas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            quality_threshold = st.slider("Limite de Qualidade", 0.0, 1.0, 0.8, 0.05)
            compliance_level = st.selectbox("N√≠vel de Conformidade", ["basic", "standard", "strict"])
        
        with col2:
            webhook_url = st.text_input("URL do Webhook (opcional)")
            external_system_id = st.text_input("ID do Sistema Externo (opcional)")
        
        # Upload de arquivo
        st.subheader("Upload de Documento (Opcional)")
        uploaded_file = st.file_uploader(
            "Carregar documento para processamento OCR",
            type=["pdf", "png", "jpg", "jpeg", "tiff", "bmp"]
        )
        
        # Bot√£o de submiss√£o
        submitted = st.form_submit_button("üöÄ Gerar Documento")
        
        if submitted:
            if not company_name or not activity_description:
                st.error("Por favor, preencha todos os campos obrigat√≥rios")
                return
            
            # Preparar dados
            request_data = {
                "document_type": document_type,
                "company_name": company_name,
                "activity_description": activity_description,
                "industry_sector": industry_sector,
                "language": language,
                "jurisdiction": jurisdiction,
                "custom_requirements": {
                    "quality_threshold": quality_threshold,
                    "compliance_level": compliance_level
                },
                "webhook_url": webhook_url if webhook_url else None,
                "external_system_id": external_system_id if external_system_id else None
            }
            
            # Enviar requisi√ß√£o
            try:
                files = {}
                if uploaded_file:
                    files = {"file": uploaded_file}
                
                response = requests.post(
                    f"{API_BASE_URL}/documents/generate",
                    data={"request": json.dumps(request_data)},
                    files=files
                )
                
                if response.status_code == 200:
                    result = response.json()
                    st.success(f"Documento iniciado com sucesso!")
                    st.info(f"ID do Documento: {result['document_id']}")
                    st.info(f"Tempo estimado: {result['estimated_completion_time']} minutos")
                    
                    # Mostrar progresso
                    show_document_progress(result['document_id'])
                else:
                    st.error(f"Erro ao gerar documento: {response.text}")
                    
            except Exception as e:
                st.error(f"Erro de conex√£o: {str(e)}")

def show_document_progress(document_id: str):
    """Mostra progresso de um documento espec√≠fico"""
    st.subheader(f"Progresso - {document_id}")
    
    # Simular progresso
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i in range(100):
        time.sleep(0.1)
        progress_bar.progress(i + 1)
        status_text.text(f"Processando... {i + 1}%")
    
    status_text.text("Conclu√≠do!")

def show_documents_list():
    """Lista todos os documentos"""
    st.title("Lista de Documentos")
    
    # Filtros
    col1, col2, col3 = st.columns(3)
    
    with col1:
        status_filter = st.selectbox(
            "Status",
            ["Todos", "Processando", "Aprovado", "Rejeitado", "Em Revis√£o"]
        )
    
    with col2:
        type_filter = st.selectbox(
            "Tipo",
            ["Todos", "Pol√≠tica de Privacidade", "Termo de Consentimento", "Cl√°usula Contratual"]
        )
    
    with col3:
        date_filter = st.date_input("Data")
    
    # Dados simulados
    documents = [
        {
            "ID": "doc-001",
            "Tipo": "Pol√≠tica de Privacidade",
            "Empresa": "TechCorp Ltda",
            "Status": "Aprovado",
            "Qualidade": "85%",
            "Conformidade": "90%",
            "Data": "2024-01-15 14:30",
            "Tempo": "12 min"
        },
        {
            "ID": "doc-002",
            "Tipo": "Termo de Consentimento", 
            "Empresa": "HealthClinic",
            "Status": "Em Revis√£o",
            "Qualidade": "78%",
            "Conformidade": "82%",
            "Data": "2024-01-15 13:45",
            "Tempo": "8 min"
        },
        {
            "ID": "doc-003",
            "Tipo": "Cl√°usula Contratual",
            "Empresa": "FinanceBank",
            "Status": "Processando",
            "Qualidade": "-",
            "Conformidade": "-", 
            "Data": "2024-01-15 15:20",
            "Tempo": "5 min"
        }
    ]
    
    # Filtrar dados
    if status_filter != "Todos":
        documents = [d for d in documents if d["Status"] == status_filter]
    
    if type_filter != "Todos":
        documents = [d for d in documents if d["Tipo"] == type_filter]
    
    # Mostrar tabela
    df = pd.DataFrame(documents)
    st.dataframe(df, use_container_width=True)
    
    # A√ß√µes em lote
    st.subheader("A√ß√µes")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üì• Exportar Lista"):
            st.success("Lista exportada com sucesso!")
    
    with col2:
        if st.button("üîÑ Atualizar"):
            st.rerun()
    
    with col3:
        if st.button("Limpar Filtros"):
            st.rerun()

def show_metrics():
    """P√°gina de m√©tricas detalhadas"""
    st.title("M√©tricas Detalhadas")
    
    # M√©tricas gerais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total de Documentos", "156", "+12%")
    
    with col2:
        st.metric("Taxa de Aprova√ß√£o", "87%", "+3%")
    
    with col3:
        st.metric("Tempo M√©dio", "14.2 min", "-2.1 min")
    
    with col4:
        st.metric("Satisfa√ß√£o", "4.8/5", "+0.2")
    
    # Gr√°ficos detalhados
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Volume por Per√≠odo")
        # Dados simulados
        dates = pd.date_range(start="2024-01-01", end="2024-01-15", freq="D")
        volumes = [5, 8, 12, 6, 9, 15, 11, 7, 13, 10, 8, 14, 9, 12, 11]
        
        df_volume = pd.DataFrame({
            "Data": dates,
            "Documentos": volumes
        })
        
        fig = px.line(df_volume, x="Data", y="Documentos")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üéØ Performance por Agente")
        # Dados simulados
        agents = ["OCR", "Classificador", "Pesquisa", "Estrutura√ß√£o", "Gera√ß√£o", "Qualidade", "Conformidade"]
        performance = [95, 88, 92, 85, 90, 87, 93]
        
        df_perf = pd.DataFrame({
            "Agente": agents,
            "Performance": performance
        })
        
        fig = px.bar(df_perf, x="Agente", y="Performance", color="Performance")
        st.plotly_chart(fig, use_container_width=True)
    
    # Tabela de performance
    st.subheader("Performance Detalhada")
    
    performance_data = [
        {
            "Agente": "OCR Agent",
            "Documentos Processados": 156,
            "Taxa de Sucesso": "95%",
            "Tempo M√©dio": "2.3s",
            "Erros": 8
        },
        {
            "Agente": "Classifier Agent",
            "Documentos Processados": 156,
            "Taxa de Sucesso": "88%",
            "Tempo M√©dio": "1.8s",
            "Erros": 19
        },
        {
            "Agente": "Research Agent",
            "Documentos Processados": 156,
            "Taxa de Sucesso": "92%",
            "Tempo M√©dio": "3.2s",
            "Erros": 12
        },
        {
            "Agente": "Structure Agent",
            "Documentos Processados": 156,
            "Taxa de Sucesso": "85%",
            "Tempo M√©dio": "2.1s",
            "Erros": 23
        },
        {
            "Agente": "Generator Agent",
            "Documentos Processados": 156,
            "Taxa de Sucesso": "90%",
            "Tempo M√©dio": "8.5s",
            "Erros": 16
        },
        {
            "Agente": "Quality Agent",
            "Documentos Processados": 156,
            "Taxa de Sucesso": "87%",
            "Tempo M√©dio": "4.2s",
            "Erros": 20
        },
        {
            "Agente": "Compliance Agent",
            "Documentos Processados": 156,
            "Taxa de Sucesso": "93%",
            "Tempo M√©dio": "3.8s",
            "Erros": 11
        }
    ]
    
    df_perf_detailed = pd.DataFrame(performance_data)
    st.dataframe(df_perf_detailed, use_container_width=True)

def show_settings():
    """P√°gina de configura√ß√µes"""
    st.title("Configura√ß√µes")
    
    # Configura√ß√µes da API
    st.subheader("üîó Configura√ß√µes da API")
    
    api_url = st.text_input("URL da API", value=API_BASE_URL)
    
    if st.button("Testar Conex√£o"):
        try:
            response = requests.get(f"{api_url}/health")
            if response.status_code == 200:
                st.success("Conex√£o bem-sucedida!")
            else:
                st.error("Falha na conex√£o")
        except Exception:
            st.error("Erro de conex√£o")
    
    # Configura√ß√µes do sistema
    st.subheader("‚öôÔ∏è Configura√ß√µes do Sistema")
    
    col1, col2 = st.columns(2)
    
    with col1:
        max_file_size = st.number_input("Tamanho m√°ximo de arquivo (MB)", value=10, min_value=1, max_value=100)
        quality_threshold = st.slider("Limite de qualidade padr√£o", 0.0, 1.0, 0.8, 0.05)
    
    with col2:
        max_revision_attempts = st.number_input("Tentativas m√°ximas de revis√£o", value=3, min_value=1, max_value=10)
        compliance_level = st.selectbox("N√≠vel de conformidade padr√£o", ["basic", "standard", "strict"])
    
    # Configura√ß√µes de notifica√ß√£o
    st.subheader("üîî Configura√ß√µes de Notifica√ß√£o")
    
    enable_webhooks = st.checkbox("Habilitar webhooks")
    webhook_url = st.text_input("URL do webhook padr√£o")
    
    enable_email = st.checkbox("Habilitar notifica√ß√µes por email")
    email_address = st.text_input("Email para notifica√ß√µes")
    
    # Salvar configura√ß√µes
    if st.button("üíæ Salvar Configura√ß√µes"):
        st.success("Configura√ß√µes salvas com sucesso!")

if __name__ == "__main__":
    main()